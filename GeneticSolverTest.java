/**
 * The test class GeneticSolverTest.  Generated by BlueJ.
 *
 * Copyright BlueJ authors
 * Copyright 2011 Jan Minar <rdancer@rdancer.org>  All rights reserved.
 *
 * @author BlueJ authors
 * @author Jan Minar <rdancer@rdancer.org> 
 */

import java.io.*;
import java.util.*;

public class GeneticSolverTest extends junit.framework.TestCase
{
    private World world;
    private GeneticSolver solver;
    private final String INPUT_DATA_FILE_PATH = "./assignment/testcase.txt";
    
    
    /**
     * Default constructor for test class GeneticSolverTest
     */
    public GeneticSolverTest()
    {
    }

    /**
     * Sets up the test fixture.
     *
     * Called before every test case method.
     */
    protected void setUp()
    {
        try {
            world = new World(new File(INPUT_DATA_FILE_PATH));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        solver = new GeneticSolver(world);
    }

    /**
     * Tears down the test fixture.
     *
     * Called after every test case method.
     */
    protected void tearDown()
    {
    }
    
    public void testNewGeneticSolver()
    {
        // Just have the setUp() method run
    }
    
    public void testFixGenesEmpty()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        
        List<Integer>[] fixedGenes = solver.fixGenes(genes);

        assertEquals(2, fixedGenes.length);
        assertEquals(0, fixedGenes[0].size());
        assertEquals(0, fixedGenes[1].size());
    }

    public void testFixGenesInvalidAssymentricalGenes()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        genes[0].add(42);
        //genes[1].add(42);
        
        try {
            solver.fixGenes(genes);
        } catch (Throwable e) {
            return;
        }
        
        // Should not be reached
        
        throw new Error("Invalid input silently ignored");
    }

    public void testFixGenesSimple()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        genes[0].add(42);
        genes[1].add(42);
        
        List<Integer>[] fixedGenes = solver.fixGenes(genes);
        
        assertEquals(1, fixedGenes[0].size());
        assertEquals(1, fixedGenes[1].size());
        assertEquals(42, fixedGenes[0].get(0).intValue());
        assertEquals(42, fixedGenes[1].get(0).intValue());
    }

    public void testFixGenesOne()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        genes[0].add(13);
        genes[1].add(72);
        
        List<Integer>[] fixedGenes = solver.fixGenes(genes);
        
        assertEquals(1, fixedGenes[0].size());
        assertEquals(1, fixedGenes[1].size());
        assertEquals(72, fixedGenes[0].get(0).intValue());
        assertEquals(13, fixedGenes[1].get(0).intValue());
    } 

    public void testFixGenesTwoSwapTwo()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        genes[0].add(13); genes[0].add(17);
        genes[1].add(72); genes[1].add(87);
        
        List<Integer>[] fixedGenes = solver.fixGenes(genes);
        
        assertEquals(2, fixedGenes[0].size());
        assertEquals(2, fixedGenes[1].size());
        assertEquals(72, fixedGenes[0].get(0).intValue());
        assertEquals(87, fixedGenes[0].get(1).intValue());
        assertEquals(13, fixedGenes[1].get(0).intValue());
        assertEquals(17, fixedGenes[1].get(1).intValue());
    }     
    
    public void testFixGenesTwoSwapOne()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        genes[0].add(13); genes[0].add(17);
        genes[1].add(72); genes[1].add(17);
        
        List<Integer>[] fixedGenes = solver.fixGenes(genes);
        
        assertEquals(2, fixedGenes[0].size());
        assertEquals(2, fixedGenes[1].size());
        assertEquals(72, fixedGenes[0].get(0).intValue());
        assertEquals(17, fixedGenes[0].get(1).intValue());
        assertEquals(13, fixedGenes[1].get(0).intValue());
        assertEquals(17, fixedGenes[1].get(1).intValue());
    }     
    
    public void testFixGenesTwoSwapOneAcross()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        genes[0].add(17); genes[0].add(13);
        genes[1].add(72); genes[1].add(17);
        
        List<Integer>[] fixedGenes = solver.fixGenes(genes);
        
        assertEquals(2, fixedGenes[0].size());
        assertEquals(2, fixedGenes[1].size());
        assertEquals(17, fixedGenes[0].get(0).intValue());
        assertEquals(72, fixedGenes[0].get(1).intValue());
        assertEquals(13, fixedGenes[1].get(0).intValue());
        assertEquals(17, fixedGenes[1].get(1).intValue());
    }     
    
    public void testFixGenesThreeSwapOne()
    {
        List<Integer>[] genes = new List[2];
        genes[0] = new ArrayList<Integer>();
        genes[1] = new ArrayList<Integer>();
        genes[0].add(13); genes[0].add(63); genes[0].add(17);
        genes[1].add(72); genes[1].add(17); genes[1].add(127);
        
        List<Integer>[] fixedGenes = solver.fixGenes(genes);
        
        assertEquals(3, fixedGenes[0].size());
        assertEquals(3, fixedGenes[1].size());
        
        assertEquals(72, fixedGenes[0].get(0).intValue());
        assertEquals(127, fixedGenes[0].get(1).intValue());
        assertEquals(17, fixedGenes[0].get(2).intValue());     
        
        assertEquals(13, fixedGenes[1].get(0).intValue());
        assertEquals(17, fixedGenes[1].get(1).intValue());
        assertEquals(63, fixedGenes[1].get(2).intValue());
    }     
}
